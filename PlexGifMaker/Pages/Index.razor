@page "/"
@page "/index"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PlexGifMaker.Data
@using PlexGifMaker.Pages.Components
@using System.Globalization
@using SubtitlesParser.Classes
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject PlexService PlexService
@inject ILogger<Index> _logger

@namespace PlexGifMaker.Data

<h3>Select Library, TV Show, Episode, and Subtitle Segment</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (isLoading)
{
    <LoadingSpinner />
}
else
{
    <LibrarySelector Libraries="libraries" OnLibrarySelected="@HandleLibraryChange" />

    @if (shows != null && shows.Any())
    {
        <ShowSelector Shows="shows" OnShowSelected="@HandleShowChange" />
    }

    @if (episodes != null && episodes.Any())
    {
        <EpisodeSelector Episodes="episodes" OnEpisodeSelected="@HandleEpisodeChange" />
    }

    @if (subtitleOptions != null && subtitleOptions.Any())
    {
        <SubtitleSelector SubtitleOptions="subtitleOptions" OnSubtitleSelected="@HandleSubtitleOptionChange" />
    }

    @if (!string.IsNullOrEmpty(selectedEpisode) || !subsFound)
    {
        <GifCreator SelectedEpisode="selectedEpisode"
                    Subtitles="subtitles"
                    TotalDuration="totalDuration"
                    OnCreateGif="CreateGif"
                    IsCreatingGif="isCreatingGif"
                    IsExtracting="isExtracting"
                    GifPath="@gifPath"
                    @ref="gifCreatorRef" />
    }
}

    @code {
        private string? selectedLibraryKey;
        private string? selectedShowKey;
        private string? selectedEpisode;
        private string? selectedSubtitleOptionKey;
        private List<Library>? libraries;
        private List<Episode>? shows;
        private List<Episode>? episodes;
        private bool isLoading = true;
        private List<SubtitleItem>? subtitles;
        private string? gifPath;
        private bool isCreatingGif = false;
        private bool isExtracting = false;
        private string? errorMessage;
        private TimeSpan totalDuration;
        float totalDurationInSeconds;
        private bool subsFound = true;
        private List<Subtitle?>? subtitleOptions;

        private GifCreator? gifCreatorRef;

        private async Task CreateGif((int startTime, int endTime) times)
        {
            if (string.IsNullOrEmpty(selectedEpisode))
            {
                errorMessage = "Please select all the necessary options before creating a GIF.";
                StateHasChanged();
                return;
            }

            isCreatingGif = true;
            errorMessage = null;
            gifPath = null;
            StateHasChanged();

            try
            {
                string? newGifPath;
                if (selectedSubtitleOptionKey != null)
                {
                    newGifPath = await PlexService.CreateGifFromSubtitlesAsync(selectedEpisode, times.startTime, times.endTime, selectedSubtitleOptionKey);
                }
                else
                {
                    newGifPath = await PlexService.CreateGifFromSubtitlesAsync(selectedEpisode, times.startTime, times.endTime);
                }

                if (!string.IsNullOrEmpty(newGifPath))
                {
                    // Ensure the GifPath starts with a forward slash for web URLs
                    gifPath = gifPath?.Replace(@"/wwwroot", "");
                    gifPath = newGifPath.StartsWith("/") ? newGifPath : "/" + newGifPath;
                    _logger.LogInformation($"GIF created successfully. Path: {gifPath}");
                }
                else
                {
                    errorMessage = "Failed to generate GIF. The service returned an empty path.";
                    _logger.LogWarning("GIF creation failed. Empty path returned from service.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating GIF");
                errorMessage = "An error occurred while creating the GIF. Please try again.";
                gifPath = null;
            }
            finally
            {
                isCreatingGif = false;
                StateHasChanged();
            }
        }

        // When you need to set subtitle times from the parent component:
        private void SetSubtitleTimes(int startTime, int endTime)
        {
            gifCreatorRef?.SetSubtitleTimes(startTime, endTime);
        }

        private string startSubtitleTimeString
        {
            get => TimeSpan.FromMilliseconds(selectedStartSubtitleTime).ToString(@"hh\:mm\:ss\:fff");
            set
            {
                if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss\:fff", null, out var time))
                {
                    selectedStartSubtitleTime = (int)time.TotalMilliseconds;
                }
            }
        }

        private string endSubtitleTimeString
        {
            get => TimeSpan.FromMilliseconds(selectedEndSubtitleTime).ToString(@"hh\:mm\:ss\:fff");
            set
            {
                if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss\:fff", null, out var time))
                {
                    selectedEndSubtitleTime = (int)time.TotalMilliseconds;
                }
            }
        }
        private int selectedStartSubtitleTime;
        private int selectedEndSubtitleTime;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await InitializeSettingsAndLibraries();
            }
        }

        private async Task InitializeSettingsAndLibraries()
        {
            var baseUriResult = await ProtectedLocalStorage.GetAsync<string>("PlexBaseUri");
            var tokenResult = await ProtectedLocalStorage.GetAsync<string>("PlexToken");

            if (!baseUriResult.Success || string.IsNullOrWhiteSpace(baseUriResult.Value) ||
                !tokenResult.Success || string.IsNullOrWhiteSpace(tokenResult.Value))
            {
                _logger.LogWarning("Base URI or token is missing in local storage. Redirecting to settings.");
                NavigationManager.NavigateTo("/settings");
                return;
            }

            PlexService.SetConfiguration(baseUriResult.Value!, tokenResult.Value!);

            try
            {
                libraries = await PlexService.GetLibrariesAsync();
            }
            catch (UnauthorizedAccessException)
            {
                errorMessage = "Your Plex session may have expired or you may not have the necessary permissions. Please try re-authenticating.";
                NavigationManager.NavigateTo("/settings");
                return;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to fetch libraries");
                errorMessage = "An error occurred while fetching your Plex libraries. Please try again later.";
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }

        private async Task HandleLibraryChange(string libraryKey)
        {
            selectedLibraryKey = libraryKey ?? string.Empty;
            try
            {
                var content = await PlexService.GetShowsAsync(selectedLibraryKey);
                if (content == null || !content.Any())
                {
                    _logger.LogWarning("No content found in library {LibraryKey}", selectedLibraryKey);
                    shows = new List<Episode>();
                    episodes = new List<Episode>();
                }
                else
                {
                    // Check if the library contains movies
                    if (content.Any(item => item.IsMovie))
                    {
                        // This is a movie library
                        episodes = content.Where(item => item.IsMovie).ToList();
                        shows = null; // Set shows to null for movie libraries
                    }
                    else
                    {
                        // This is a TV show library
                        shows = content.Where(item => !item.IsMovie).ToList();
                        episodes = null; // Set episodes to null for TV show libraries
                    }
                }

                selectedEpisode = null;
                selectedShowKey = null;
                selectedSubtitleOptionKey = null;
                subtitles = null;
                subtitleOptions = null;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching content for library {LibraryKey}", selectedLibraryKey);
                errorMessage = "An error occurred while fetching content. Please try again.";
            }
            StateHasChanged();
        }

        private async Task HandleShowChange(string showKey)
        {
            selectedShowKey = showKey;
            if (!string.IsNullOrWhiteSpace(selectedShowKey))
            {
                try
                {
                    episodes = await PlexService.GetEpisodesAsync(selectedShowKey, false);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error fetching episodes for show {ShowKey}", selectedShowKey);
                    errorMessage = "An error occurred while fetching episodes. Please try again.";
                }
            }
            else
            {
                _logger.LogWarning("selectedShowKey is null or whitespace.");
            }
            selectedEpisode = null;
            subtitles = null;
            subtitleOptions = null;
            selectedSubtitleOptionKey = null;
            StateHasChanged();
        }

        private async Task HandleEpisodeChange(string episodeId)
        {
            selectedEpisode = episodeId;
            subtitles = null;
            selectedSubtitleOptionKey = null;
            subtitleOptions = null;
            if (selectedEpisode != null)
            {
                try
                {
                    subtitleOptions = await PlexService.GetSubtitleOptionsAsync(selectedEpisode);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error fetching subtitle options for content {ContentId}", selectedEpisode);
                    errorMessage = "An error occurred while fetching subtitle options. Please try again.";
                }
            }
            else
            {
                _logger.LogWarning("Selected content is null or empty.");
            }
            StateHasChanged();
        }

        private async Task HandleSubtitleOptionChange(string subtitleKey)
        {
            if (!string.IsNullOrEmpty(subtitleKey))
            {
                if (int.TryParse(subtitleKey, out var index))
                {
                    selectedSubtitleOptionKey = index.ToString();
                }
                else
                {
                    selectedSubtitleOptionKey = subtitleKey;
                }
                await setSubtitles();
            }
            else
            {
                _logger.LogWarning("OnSubtitleOptionChange received a null or empty value.");
            }
        }



        private void HandleStartSubtitleChange(ChangeEventArgs e)
        {
            if (e?.Value != null && int.TryParse(e.Value.ToString(), out var result))
            {
                selectedStartSubtitleTime = result;
            }
            else
            {
                _logger.LogWarning("HandleStartSubtitleChange received a null or invalid ChangeEventArgs.");
            }
        }

        private void HandleEndSubtitleChange(ChangeEventArgs e)
        {
            if (e?.Value != null && int.TryParse(e.Value.ToString(), out var result))
            {
                selectedEndSubtitleTime = result;
            }
            else
            {
                _logger.LogWarning("HandleEndSubtitleChange received a null or invalid ChangeEventArgs.");
            }
        }

        private void HandleStartSubtitleTimeChange(ChangeEventArgs e)
        {
            if (TimeSpan.TryParseExact(e?.Value?.ToString(), @"hh\:mm\:ss\:fff", CultureInfo.InvariantCulture, out var time))
            {
                selectedStartSubtitleTime = (int)time.TotalMilliseconds;
                startSubtitleTimeString = FormatTimeSpanAsString(time);
            }
            else
            {
                _logger.LogWarning("Invalid start time format entered.");
                errorMessage = "Please enter a valid time in the format HH:mm:ss:fff.";
            }
        }

        private void HandleEndSubtitleTimeChange(ChangeEventArgs e)
        {
            if (TimeSpan.TryParseExact(e?.Value?.ToString(), @"hh\:mm\:ss\:fff", CultureInfo.InvariantCulture, out var time))
            {
                selectedEndSubtitleTime = (int)time.TotalMilliseconds;
                endSubtitleTimeString = FormatTimeSpanAsString(time);
            }
            else
            {
                _logger.LogWarning("Invalid end time format entered.");
                errorMessage = "Please enter a valid time in the format HH:mm:ss:fff.";
            }
        }

        private string FormatTimeSpanAsString(TimeSpan timeSpan)
        {
            return timeSpan.ToString(@"hh\:mm\:ss\:fff");
        }

        private async Task setSubtitles()
        {
            if (!string.IsNullOrEmpty(selectedEpisode))
            {
                try
                {
                    await PlexService.DeleteSubtitleFilesAsync();
                    if (int.TryParse(selectedSubtitleOptionKey, out int index))
                    {
                        isExtracting = true;
                        StateHasChanged();
                        subtitles = await PlexService.ExtractSubtitles(selectedEpisode, index);
                    }
                    else if (selectedSubtitleOptionKey != null)
                    {
                        subtitles = await PlexService.GetActualSubtitlesAsync(selectedEpisode, selectedSubtitleOptionKey);
                    }

                    totalDuration = await PlexService.GetEpisodeDurationAsync(selectedEpisode);
                    totalDurationInSeconds = (float)totalDuration.TotalSeconds;

                    _logger.LogInformation($"Fetched {subtitles?.Count} subtitles for episode {selectedEpisode}");
                    if (subtitles?.Count == 0)
                    {
                        subsFound = false;
                        errorMessage = "No subtitles found for the selected episode. Please enter the start and end times manually.";
                    }
                    else
                    {
                        subsFound = true;
                        errorMessage = null;
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error fetching subtitles for episode {EpisodeId}", selectedEpisode);
                    errorMessage = "An error occurred while fetching subtitles. Please try again.";
                }
                finally
                {
                    isExtracting = false;
                    StateHasChanged();
                }
            }
            else
            {
                _logger.LogWarning("Selected episode is null or empty.");
                errorMessage = "Please select an episode before fetching subtitles.";
            }
        }
}